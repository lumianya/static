function initialize_fc_lite() {
  UserConfig = {
    private_api_url: UserConfig?.private_api_url || "",
    page_turning_number: UserConfig?.page_turning_number || 24,
    error_img: UserConfig?.error_img || "https://fastly.jsdelivr.net/gh/willow-god/Friend-Circle-Lite/static/favicon.ico"
  };

  const rootElement = document.getElementById("friend-circle-lite-root");
  if (!rootElement) return;

  rootElement.innerHTML = "";

  const randomArticle = document.createElement("div");
  randomArticle.id = "random-article";
  rootElement.appendChild(randomArticle);

  const articlesContainer = document.createElement("div");
  articlesContainer.className = "articles-container";
  articlesContainer.id = "articles-container";
  rootElement.appendChild(articlesContainer);

  const loadMoreButton = document.createElement("button");
  loadMoreButton.id = "load-more-btn";
  loadMoreButton.innerText = "再来亿点";
  rootElement.appendChild(loadMoreButton);

  const statsContainer = document.createElement("div");
  statsContainer.id = "stats-container";
  rootElement.appendChild(statsContainer);

  let currentPage = 0;
  let articles = [];

  function fetchData() {
    const cacheKey = "friend-circle-lite-cache";
    const cacheTimeKey = "friend-circle-lite-cache-time";
    const cacheTime = localStorage.getItem(cacheTimeKey);
    const currentTime = new Date().getTime();

    if (cacheTime && currentTime - cacheTime < 600000) {
      const cachedData = JSON.parse(localStorage.getItem(cacheKey));
      if (cachedData) {
        renderData(cachedData);
        return;
      }
    }

    fetch(`${UserConfig.private_api_url}all.json`)
      .then(response => response.json())
      .then(data => {
        localStorage.setItem(cacheKey, JSON.stringify(data));
        localStorage.setItem(cacheTimeKey, currentTime.toString());
        renderData(data);
      })
      .catch(error => {
        console.error("Error fetching data:", error);
        loadMoreButton.innerText = "加载失败";
      });
  }

  function renderData(data) {
    if (!data || !data.statistical_data || !data.article_data) {
      console.error("Invalid data format:", data);
      loadMoreButton.innerText = "数据格式错误";
      return;
    }

    articles = data.article_data;
    const stats = data.statistical_data;

    statsContainer.innerHTML = `
      <div>Powered by: <a href="https://github.com/willow-god/Friend-Circle-Lite" target="_blank">FriendCircleLite</a><br></div>
      <div>Designed By: <a href="https://www.liushen.fun/" target="_blank">LiuShen</a><br></div>
      <div>订阅: ${stats.friends_num}   活跃: ${stats.active_num}   总文章数: ${stats.article_num}<br></div>
      <div>更新时间: ${stats.last_updated_time}</div>
    `;

    renderRandomArticle();
    renderArticles(currentPage, UserConfig.page_turning_number);
  }

  function renderRandomArticle() {
    const randomArticle = articles[Math.floor(Math.random() * articles.length)];
    if (!randomArticle) return;

    const randomContainer = document.createElement("div");
    randomContainer.className = "random-container";
    randomContainer.innerHTML = `
      <div class="random-container-title">随机钓鱼</div>
      <div class="random-title">${randomArticle.title}</div>
      <div class="random-author">作者: ${randomArticle.author}</div>
    `;
    const randomButtonContainer = document.createElement("div");
    randomButtonContainer.className = "random-button-container";
    randomButtonContainer.innerHTML = `
      <a href="#" id="refresh-random-article">刷新</a>
      <button class="random-link-button" onclick="window.open('${randomArticle.link}', '_blank')">过去转转</button>
    `;
    document.getElementById("refresh-random-article").addEventListener("click", (e) => {
      e.preventDefault();
      renderRandomArticle();
    });
    randomArticle.appendChild(randomButtonContainer);
    document.getElementById("random-article").appendChild(randomContainer);
  }

  function renderArticles(start, count) {
    const slice = articles.slice(start, start + count);
    slice.forEach(article => {
      const card = document.createElement("div");
      card.className = "card";
      card.innerHTML = `
        <div class="card-title">${article.title}</div>
        <div class="card-author">
          <img src="${article.avatar || UserConfig.error_img}" alt="" class="no-lightbox" onerror="this.src='${UserConfig.error_img}'">
          ${article.author}
        </div>
        <div class="card-date">🗓️${article.created.substring(0, 10)}</div>
        <img src="${article.avatar || UserConfig.error_img}" alt="" class="card-bg no-lightbox" onerror="this.src='${UserConfig.error_img}'">
      `;
      card.querySelector(".card-title").addEventListener("click", () => window.open(article.link, "_blank"));
      card.querySelector(".card-author").addEventListener("click", () => {
        const modal = document.createElement("div");
        modal.id = "modal";
        modal.className = "modal";
        modal.innerHTML = `
          <div class="modal-content">
            <img id="modal-author-avatar" src="${article.avatar || UserConfig.error_img}" alt="">
            <a id="modal-author-name-link" href="${new URL(article.link).origin}" target="_blank">${article.author}</a>
            <div id="modal-articles-container"></div>
            <img id="modal-bg" src="${article.avatar || UserConfig.error_img}" alt="">
          </div>
        `;
        document.getElementById("friend-circle-lite-root").appendChild(modal);
        modal.classList.add("modal-open");

        const modalArticlesContainer = document.getElementById("modal-articles-container");
        modalArticlesContainer.innerHTML = "";
        articles.filter(a => a.author === article.author).slice(0, 4).forEach(a => {
          const modalArticle = document.createElement("div");
          modalArticle.className = "modal-article";
          modalArticle.innerHTML = `
            <a class="modal-article-title" href="${a.link}" target="_blank">${a.title}</a>
            <div class="modal-article-date">📅${a.created.substring(0, 10)}</div>
          `;
          modalArticlesContainer.appendChild(modalArticle);
        });

        window.onclick = (e) => {
          if (e.target === modal) {
            modal.classList.remove("modal-open");
            modal.addEventListener("transitionend", () => {
              modal.style.display = "none";
              document.getElementById("friend-circle-lite-root").removeChild(modal);
            }, { once: true });
          }
        };
      });
      articlesContainer.appendChild(card);
    });

    currentPage += count;
    if (currentPage >= articles.length) {
      loadMoreButton.style.display = "none";
    }
  }

  loadMoreButton.addEventListener("click", () => {
    fetchData();
  });

  fetchData();
}

function whenDOMReady() {
  initialize_fc_lite();
}

document.addEventListener("DOMContentLoaded", whenDOMReady);
document.addEventListener("pjax:complete", whenDOMReady);
